# In this file you can override any option defined in the reference files.
# Copy in parts of the reference files and modify as you please.
akka {
  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger","akka.event.Logging$DefaultLogger"]
  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"
  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"
  #actor {
  #  provider = "akka.cluster.ClusterActorRefProvider"
  #  default-dispatcher {
      # Throughput for default Dispatcher, set to 1 for as fair as possible
  #    throughput = 10
  #  }
  #}
  #remote {
    # The port clients should connect to. Default is 2552.
  #  netty.tcp.port = 4711
  #}

}

single-thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = PinnedDispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 4
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 10
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 1
}

thread-pool-dispatcher {
  # Dispatcher is the name of the event-based dispatcher
  type = Dispatcher
  # What kind of ExecutionService to use
  executor = "thread-pool-executor"
  # Configuration for the thread pool
  thread-pool-executor {
    # minimum number of threads to cap factor-based core number to
    core-pool-size-min = 50
    # No of core threads ... ceil(available processors * factor)
    core-pool-size-factor = 2.0
    # maximum number of threads to cap factor-based number to
    core-pool-size-max = 50
  }
  # Throughput defines the maximum number of messages to be
  # processed per actor before the thread jumps to the next actor.
  # Set to 1 for as fair as possible.
  throughput = 100
}

akka.actor.deployment {

  /logFileListingActor {
    dispatcher = single-thread-pool-dispatcher
  }

  /lineNumberRequestingActor {
    dispatcher = single-thread-pool-dispatcher
  }

  /watchActor {
    dispatcher = single-thread-pool-dispatcher
  }

  #/lineNumberDispatchingActor {
  #  dispatcher = single-thread-pool-dispatcher
  #}

  /taskDispatchingActor {
    dispatcher = single-thread-pool-dispatcher
  }

}